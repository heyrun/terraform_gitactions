name: 'Terraform'

on:
  workflow_call:
    inputs:
      working_dir:
        required: true
        type: string
      env:
        required: true
        type: string
permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        #working-directory: ${{inputs.working_dir}}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
<<<<<<< HEAD
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
=======
        cli_config_credentials_token: KhlHWNWKzz6k5g.atlasv1.fIMOqq8J1qQg3QlYRlvIcGAFjThptQsjVh7ibum3eTnyy3X1ycnbB33O9aFkzzlwPuk
        terraform_wrapper: true
>>>>>>> 3ddaef8d3a90b1e2b01a813ed243e7de727a4c9c

    - name: Change directory
      run: echo '$GITHUB_WORKSPACE'
      continue-on-error: true


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cd ${{ inputs.working_dir }}
        terraform init
      working-directory: ${{ inputs.working_dir }}
      continue-on-error: true

    - name: Terraform-Lint
      # You may pin to the exact commit or the version.
      # uses: actionshub/terraform-lint@0a86dd0b510e5fd6ab5b13179d6979dc82e5cb8e
      uses: actionshub/terraform-lint@1.0.0
      continue-on-error: true

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ${{inputs.working_dir}}
      continue-on-error: true


    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ${{inputs.working_dir}}
      continue-on-error: true


      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
      working-directory: ${{inputs.working_dir}}













#name: "Terraform"

#on:
#  push:
#    branches:
#      - tf_automation_with_github_actions
#  pull_request:

#jobs:
#  terraform:
#    name: "Terraform"
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3

#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v1
#        with:
#          # terraform_version: 0.13.0:
#          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

#      - name: Terraform Format
#        id: fmt
#        run: terraform fmt -check

#      - name: Terraform Init
#        id: init
#        run: terraform init
      
#      - name: Terraform Validate
#        id: validate
#        run: terraform validate -no-color

#      - name: Terraform Plan
#        id: plan
#        if: github.event_name == 'pull_request'
#        run: terraform plan -no-color -input=false
#        continue-on-error: true

#      - uses: actions/github-script@v6
#        if: github.event_name == 'pull_request'
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

#            <details><summary>Show Plan</summary>

#            \`\`\`\n
#            ${process.env.PLAN}
#            \`\`\`

#            </details>

#            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })

#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        run: exit 1

#      - name: Terraform Apply
#        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#        run: terraform apply -auto-approve -input=false
